/*
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
*/
const multiplesOf3or5 = (multiples, max) => {
	const found = []
	for (let i = 1; i < max; i++) {
		for (let j = 0; j < multiples.length; j++) {
			if (i % multiples[j] === 0 && !found.includes(i)) found.push(i)
		}
	}

	return found.reduce((partialSum, currVal) => partialSum + currVal, 0)
}

/*
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
const evenFibonacciNumbers = max => {
	let evenVals = [2]
	let prev = 1
	let curr = 2

	while (prev + curr < max) {
		let temp = prev
		prev = curr
		curr = temp + curr
		if (curr % 2 === 0) evenVals.push(curr)
	}

	return evenVals.reduce((partialSum, val) => partialSum + val, 0)
}

/*
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
*/
const largestPrimeFactor = number => {
	const isPrime = num => {
		let limit = Math.ceil(Math.sqrt(num))
		for (let i = 3; i <= limit; i += 2) {
			if (num % i === 0) return false
		}
		return true
	}
	let result = Math.ceil(Math.sqrt(number))

	result = result % 2 === 0 ? result - 1 : result
	while (!(number % result === 0 && isPrime(result))) {
		result -= 2
	}

	return result
}

/*
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
*/
const largestPalindromeProduct = maxDigits => {
	let maxString = ''
	for (let i = 0; i < maxDigits; i++) {
		maxString += '9'
	}

	let maxNum = Number.parseInt(maxString)
	let largestPalindrome = 0
	for (let i = 0; i <= maxNum; i++) {
		for (let j = 0; j <= maxNum; j++) {
			const val = i * j
			const stringNum = val.toString()
			let valid = true
			for (let k = 0; k < stringNum.length / 2; k++) {
				if (stringNum[k] !== stringNum[stringNum.length - 1 - k]) {
					valid = false
					break
				}
			}
			if (valid && val > largestPalindrome) largestPalindrome = val
		}
	}

	return largestPalindrome
}

// console.log(`MultiplesOf3or5: ${multiplesOf3or5([3, 5], 1000)}`) // 233168
// console.log(`evenFibonacciNumbers: ${evenFibonacciNumbers(4_000_000)}`) // 4613732
// console.log(`largestPrimeFactor: ${largestPrimeFactor(600851475143)}`) // 6857
// console.log(`largestPalindromeProduct: ${largestPalindromeProduct(3)}`) // 906609
